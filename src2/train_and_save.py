import os
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
import time
from data_loader import DataLoader
from gru import train_improved_gru
from model import BiLSTM_CNN
from trainer import ModelTrainer
from evaluator import ModelEvaluator
from bilstm import BiLSTM, train_bilstm
from cnn import CNN, train_cnn
from ablation_models import SpatialOnlyModel, TemporalOnlyModel
from params import config

# 获取当前脚本所在目录
current_dir = os.path.dirname(os.path.abspath(__file__))


# 创建保存目录的函数
def ensure_dir(dir_path):
    """确保目录存在，如果不存在则创建"""
    if not os.path.exists(dir_path):
        try:
            os.makedirs(dir_path)
            print(f"Created directory: {dir_path}")
        except Exception as e:
            print(f"Error creating directory {dir_path}: {e}")
            raise


if __name__ == "__main__":
    # 记录执行信息
    current_time = "2025-04-28 01:09:22"
    current_user = "TIANQIISGOOD"
    print(f"Execution Time (UTC): {current_time}")
    print(f"User: {current_user}")
    print("=" * 50)

    # 创建保存目录
    saved_data_dir = os.path.join(current_dir, 'saved_data')
    saved_models_dir = os.path.join(current_dir, 'saved_models')

    print("\nCreating necessary directories...")
    ensure_dir(saved_data_dir)
    ensure_dir(saved_models_dir)

    # 数据加载
    print("\nLoading and preprocessing data...")
    loader = DataLoader("OPCUA_dataset_public.csv")
    X_train_full, X_test, y_train_full, y_test = loader.load_data()

    # 数据分割
    print("Splitting data into train and validation sets...")
    X_train, X_val, y_train, y_val = train_test_split(
        X_train_full, y_train_full, test_size=0.2, random_state=42, stratify=y_train_full
    )

    # 数据形状处理
    X_train_dl = X_train.reshape(-1, config.FEATURE_DIM, 1)
    X_val_dl = X_val.reshape(-1, config.FEATURE_DIM, 1)
    X_test_dl = X_test.reshape(-1, config.FEATURE_DIM, 1)

    # 保存验证集和测试集数据
    print("\nSaving validation and test sets...")
    try:
        # 使用完整路径保存数据
        np.save(os.path.join(saved_data_dir, 'X_val.npy'), X_val_dl)
        np.save(os.path.join(saved_data_dir, 'y_val.npy'), y_val)
        np.save(os.path.join(saved_data_dir, 'X_test.npy'), X_test_dl)
        np.save(os.path.join(saved_data_dir, 'y_test.npy'), y_test)
        print("Data saved successfully!")
    except Exception as e:
        print(f"Error saving data: {e}")
        raise

    try:
        # 训练并保存所有模型
        print("\nTraining and saving models...")
        models_to_train = {
            'BiLSTM-CNN': BiLSTM_CNN(),
            'CNN': CNN(),
            'BiLSTM': BiLSTM(),
            'GRU': lambda: train_improved_gru(X_train_dl, y_train, X_val_dl, y_val)[0],
            'Spatial-Only': SpatialOnlyModel(),
            'Temporal-Only': TemporalOnlyModel()
        }

        for model_name, model in models_to_train.items():
            print(f"\nTraining {model_name} model...")
            if model_name == 'GRU':
                model = model()  # GRU使用其特定的训练函数
            else:
                trainer = ModelTrainer(model)
                trainer.train(X_train_dl, y_train, X_val_dl, y_val)

            # 使用完整路径保存模型
            model_path = os.path.join(saved_models_dir, f'{model_name}.h5')
            model.save(model_path)
            print(f"{model_name} model saved successfully!")

        print("\nAll models trained and saved successfully!")
        print(f"Results generated at: {current_time} UTC")
        print(f"Generated by: {current_user}")

    except Exception as e:
        print(f"训练或保存过程中发生错误: {str(e)}")
        print(f"Error occurred at: {current_time} UTC")
        print(f"User: {current_user}")