from data_loader import DataLoader
from gru import train_improved_gru
from model import BiLSTM_CNN
from trainer import ModelTrainer
from evaluator import ModelEvaluator
from bilstm import BiLSTM, train_bilstm
from cnn import CNN, train_cnn
from ablation_models import SpatialOnlyModel, TemporalOnlyModel
from params import config
import time
import tensorflow as tf
from sklearn.model_selection import train_test_split
import numpy as np
import os


def create_directories():
    """创建必要的目录"""
    directories = ['saved_models', 'saved_data']
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"Created directory: {directory}")


class CustomModelWrapper:
    """包装Sequential模型，添加build_custom_loss方法"""

    def __init__(self, model):
        self.model = model

    def build_custom_loss(self):
        return 'categorical_crossentropy'

    def __getattr__(self, name):
        return getattr(self.model, name)


if __name__ == "__main__":
    current_time = "2025-04-28 02:14:05"
    current_user = "TIANQIISGOOD"
    print(f"Execution Time (UTC): {current_time}")
    print(f"User: {current_user}")
    print("=" * 50)

    # 创建必要的目录
    create_directories()

    # 数据加载
    print("\nLoading and preprocessing data...")
    loader = DataLoader("OPCUA_dataset_public.csv")
    X_train_full, X_test, y_train_full, y_test = loader.load_data()

    # 数据分割
    print("Splitting data into train and validation sets...")
    X_train, X_val, y_train, y_val = train_test_split(
        X_train_full, y_train_full, test_size=0.2, random_state=42, stratify=y_train_full
    )

    # 数据形状处理
    X_train_dl = X_train.reshape(-1, config.FEATURE_DIM, 1)
    X_val_dl = X_val.reshape(-1, config.FEATURE_DIM, 1)
    X_test_dl = X_test.reshape(-1, config.FEATURE_DIM, 1)

    # 保存验证集和测试集数据
    print("\nSaving validation and test sets...")
    np.save('saved_data/X_val.npy', X_val_dl)
    np.save('saved_data/y_val.npy', y_val)
    np.save('saved_data/X_test.npy', X_test_dl)
    np.save('saved_data/y_test.npy', y_test)
    print("Data saved successfully!")

    try:
        # 训练并保存所有模型
        print("\nTraining and saving models...")

        # BiLSTM-CNN (使用原始模型，因为它已经有build_custom_loss方法)
        print("\nTraining BiLSTM-CNN model...")
        model_cnn_bilstm = BiLSTM_CNN()
        trainer = ModelTrainer(model_cnn_bilstm)
        trainer.train(X_train_dl, y_train, X_val_dl, y_val)
        model_cnn_bilstm.save('saved_models/BiLSTM-CNN.h5')
        print("BiLSTM-CNN model saved successfully!")

        # CNN
        print("\nTraining CNN model...")
        cnn_model = CNN()
        cnn_model = CustomModelWrapper(cnn_model)  # 包装模型
        trainer = ModelTrainer(cnn_model)
        trainer.train(X_train_dl, y_train, X_val_dl, y_val)
        cnn_model.model.save('saved_models/CNN.h5')
        print("CNN model saved successfully!")

        # BiLSTM
        print("\nTraining BiLSTM model...")
        bilstm_model = BiLSTM()
        bilstm_model = CustomModelWrapper(bilstm_model)  # 包装模型
        trainer = ModelTrainer(bilstm_model)
        trainer.train(X_train_dl, y_train, X_val_dl, y_val)
        bilstm_model.model.save('saved_models/BiLSTM.h5')
        print("BiLSTM model saved successfully!")

        # GRU
        print("\nTraining GRU model...")
        gru_model, _ = train_improved_gru(X_train_dl, y_train, X_val_dl, y_val)
        gru_model.save('saved_models/GRU.h5')
        print("GRU model saved successfully!")

        # 消融模型（它们已经有build_custom_loss方法）
        # Spatial-Only
        print("\nTraining Spatial-Only model...")
        spatial_model = SpatialOnlyModel()
        trainer = ModelTrainer(spatial_model)
        trainer.train(X_train_dl, y_train, X_val_dl, y_val)
        spatial_model.save('saved_models/Spatial-Only.h5')
        print("Spatial-Only model saved successfully!")

        # Temporal-Only
        print("\nTraining Temporal-Only model...")
        temporal_model = TemporalOnlyModel()
        trainer = ModelTrainer(temporal_model)
        trainer.train(X_train_dl, y_train, X_val_dl, y_val)
        temporal_model.save('saved_models/Temporal-Only.h5')
        print("Temporal-Only model saved successfully!")

        print("\nAll models trained and saved successfully!")
        print(f"Results generated at: {current_time} UTC")
        print(f"Generated by: {current_user}")

    except Exception as e:
        print(f"训练或保存过程中发生错误: {str(e)}")
        print(f"Error occurred at: {current_time} UTC")
        print(f"User: {current_user}")