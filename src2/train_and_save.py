import tensorflow as tf
import numpy as np
import os
import time
from data_loader import DataLoader
from model import BiLSTM_CNN, TemporalAttention, SpatialAttention
from trainer import ModelTrainer
from evaluator import ModelEvaluator
from bilstm import BiLSTM, train_bilstm
from cnn import CNN, train_cnn
from gru import train_improved_gru
from ablation_models import SpatialOnlyModel, TemporalOnlyModel
from sklearn.model_selection import train_test_split
from configs.params import config


def create_directories():
    """创建必要的目录"""
    directories = ['saved_models', 'saved_data']
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"Created directory: {directory}")


def save_custom_model(model, path):
    """保存自定义模型"""
    custom_objects = {
        'BiLSTM_CNN': BiLSTM_CNN,
        'TemporalAttention': TemporalAttention,
        'SpatialAttention': SpatialAttention,
        'SpatialOnlyModel': SpatialOnlyModel,
        'TemporalOnlyModel': TemporalOnlyModel
    }

    with tf.keras.utils.custom_object_scope(custom_objects):
        # 使用SavedModel格式保存
        model.save(path, save_format='tf')


class CustomModelWrapper:
    """包装Sequential模型，添加build_custom_loss方法"""

    def __init__(self, model):
        self.model = model

    def build_custom_loss(self):
        return 'categorical_crossentropy'

    def __getattr__(self, name):
        return getattr(self.model, name)


if __name__ == "__main__":
    # 记录执行信息
    current_time = "2025-04-28 02:44:59"
    current_user = "TIANQIISGOOD"
    print(f"Execution Time (UTC): {current_time}")
    print(f"User: {current_user}")
    print("=" * 50)

    # 创建必要的目录
    create_directories()

    # 数据加载
    print("\nLoading and preprocessing data...")
    loader = DataLoader("OPCUA_dataset_public.csv")
    X_train_full, X_test, y_train_full, y_test = loader.load_data()

    # 数据分割
    print("Splitting data into train and validation sets...")
    X_train, X_val, y_train, y_val = train_test_split(
        X_train_full, y_train_full, test_size=0.2, random_state=42, stratify=y_train_full
    )

    # 数据形状处理
    X_train_dl = X_train.reshape(-1, config.FEATURE_DIM, 1)
    X_val_dl = X_val.reshape(-1, config.FEATURE_DIM, 1)
    X_test_dl = X_test.reshape(-1, config.FEATURE_DIM, 1)

    # 保存验证集和测试集数据
    print("\nSaving validation and test sets...")
    np.save('saved_data/X_val.npy', X_val_dl)
    np.save('saved_data/y_val.npy', y_val)
    np.save('saved_data/X_test.npy', X_test_dl)
    np.save('saved_data/y_test.npy', y_test)
    print("Data saved successfully!")

    try:
        # BiLSTM-CNN
        print("\nTraining BiLSTM-CNN model...")
        model_cnn_bilstm = BiLSTM_CNN()
        trainer = ModelTrainer(model_cnn_bilstm)
        trainer.train(X_train_dl, y_train, X_val_dl, y_val)
        save_custom_model(model_cnn_bilstm, 'saved_models/BiLSTM-CNN')
        print("BiLSTM-CNN model saved successfully!")

        # CNN
        print("\nTraining CNN model...")
        cnn_model = CNN()
        cnn_wrapper = CustomModelWrapper(cnn_model)
        trainer = ModelTrainer(cnn_wrapper)
        trainer.train(X_train_dl, y_train, X_val_dl, y_val)
        cnn_model.save('saved_models/CNN')
        print("CNN model saved successfully!")

        # BiLSTM
        print("\nTraining BiLSTM model...")
        bilstm_model = BiLSTM()
        bilstm_wrapper = CustomModelWrapper(bilstm_model)
        trainer = ModelTrainer(bilstm_wrapper)
        trainer.train(X_train_dl, y_train, X_val_dl, y_val)
        bilstm_model.save('saved_models/BiLSTM')
        print("BiLSTM model saved successfully!")

        # GRU
        print("\nTraining GRU model...")
        gru_model, _ = train_improved_gru(X_train_dl, y_train, X_val_dl, y_val)
        gru_model.save('saved_models/GRU')
        print("GRU model saved successfully!")

        # Spatial-Only
        print("\nTraining Spatial-Only model...")
        spatial_model = SpatialOnlyModel()
        trainer = ModelTrainer(spatial_model)
        trainer.train(X_train_dl, y_train, X_val_dl, y_val)
        save_custom_model(spatial_model, 'saved_models/Spatial-Only')
        print("Spatial-Only model saved successfully!")

        # Temporal-Only
        print("\nTraining Temporal-Only model...")
        temporal_model = TemporalOnlyModel()
        trainer = ModelTrainer(temporal_model)
        trainer.train(X_train_dl, y_train, X_val_dl, y_val)
        save_custom_model(temporal_model, 'saved_models/Temporal-Only')
        print("Temporal-Only model saved successfully!")

        print("\nAll models trained and saved successfully!")
        print(f"Results generated at: {current_time} UTC")
        print(f"Generated by: {current_user}")

    except Exception as e:
        print(f"训练或保存过程中发生错误: {str(e)}")
        import traceback

        print(traceback.format_exc())
        print(f"Error occurred at: {current_time} UTC")
        print(f"User: {current_user}")