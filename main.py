# main.py 修复后
from src.data_loader import DataLoader
from src.gru import train_improved_gru
from src.model import BiLSTM_CNN
from src.trainer import ModelTrainer
from src.evaluator import ModelEvaluator
from src.bilstm import BiLSTM, train_bilstm
from src.cnn import CNN, train_cnn
from src.rf import RF, train_rf
from configs.params import config
import time
import tensorflow as tf
from sklearn.model_selection import train_test_split
from datetime import datetime

def measure_detection_time(model, X_test):
    start_time = time.time()
    _ = model.predict(X_test)
    end_time = time.time()
    return (end_time - start_time) / len(X_test)

if __name__ == "__main__":
    # 记录执行信息
    current_time = "2025-04-04 10:00:52"
    current_user = "TIANQIISGOOD"
    print(f"Execution Time (UTC): {current_time}")
    print(f"User: {current_user}")
    print("=" * 50)

    # 初始化结果字典
    results = {}

    # 数据加载
    loader = DataLoader("data/OPCUA_dataset_public.csv")
    X_train_full, X_test, y_train_full, y_test = loader.load_data()

    evaluator = ModelEvaluator()

    # 数据分割
    X_train, X_val, y_train, y_val = train_test_split(
        X_train_full, y_train_full, test_size=0.2, random_state=42
    )

    # 数据形状处理
    X_train_dl = X_train.reshape(-1, config.FEATURE_DIM, 1)
    X_val_dl = X_val.reshape(-1, config.FEATURE_DIM, 1)
    X_test_dl = X_test.reshape(-1, config.FEATURE_DIM, 1)

    X_train_rf = X_train
    X_val_rf = X_val
    X_test_rf = X_test

    # 初始化评估器
    evaluator = ModelEvaluator()
    results = {}

    try:
        # 模型训练和评估
        print("\nTraining CNN-BiLSTM model...")
        model_cnn_bilstm = BiLSTM_CNN()
        trainer = ModelTrainer(model_cnn_bilstm)
        history_cnn_bilstm = trainer.train(X_train_dl, y_train, X_val_dl, y_val)
        results['BiLSTM-CNN'] = evaluator.evaluate(model_cnn_bilstm, X_test_dl, y_test)
        results['BiLSTM-CNN']['detection_time'] = measure_detection_time(model_cnn_bilstm, X_test_dl)

        print("\nTraining CNN model...")
        cnn_model, history_cnn = train_cnn(X_train_dl, y_train, X_val_dl, y_val)
        results['CNN'] = evaluator.evaluate(cnn_model, X_test_dl, y_test)
        results['CNN']['detection_time'] = measure_detection_time(cnn_model, X_test_dl)

        print("\nTraining BiLSTM model...")
        bilstm_model, history_bilstm = train_bilstm(X_train_dl, y_train, X_val_dl, y_val)
        results['BiLSTM'] = evaluator.evaluate(bilstm_model, X_test_dl, y_test)
        results['BiLSTM']['detection_time'] = measure_detection_time(bilstm_model, X_test_dl)

        print("\nTraining GRU model...")
        gru_model, history_gru = train_improved_gru(X_train_dl, y_train, X_val_dl, y_val)
        results['GRU'] = evaluator.evaluate(gru_model, X_test_dl, y_test)
        results['GRU']['detection_time'] = measure_detection_time(gru_model, X_test_dl)

        # 5. 显示结果
        print("\n=== 模型性能对比表 ===")
        print("{:<15} | {:<8} | {:<8} | {:<8} | {:<8} | {:<8} | {:<8}".format(
            "模型名称", "Accuracy", "Recall", "F1", "FPR", "AUC", "检测时间(ms)"))
        print("-" * 80)
        for name, metrics in results.items():
            print("{:<15} | {:<8.4f} | {:<8.4f} | {:<8.4f} | {:<8.4f} | {:<8.4f} | {:<8.4f}".format(
                name,
                metrics['accuracy'],
                metrics['recall'],
                metrics['f1'],
                metrics['fpr'],
                metrics['auc'],
                metrics['detection_time'] * 1000  # 转换为毫秒
            ))

        # 添加执行信息到结果底部
        print("\n" + "=" * 50)
        print(f"Results generated at: {current_time} UTC")
        print(f"Generated by: {current_user}")

    except Exception as e:
        print(f"训练或评估过程中发生错误: {str(e)}")
        print(f"Error occurred at: {current_time} UTC")
        print(f"User: {current_user}")